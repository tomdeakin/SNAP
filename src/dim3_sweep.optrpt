Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.4.196 Build 20170411

Compiler options: -I/nfs/modules/intel/2017.4/compilers_and_libraries_2017.4.196/linux/mpi/intel64/include -I/nfs/modules/intel/2017.4/compilers_and_libraries_2017.4.196/linux/mpi/intel64/include -O3 -xMIC-AVX512 -align array256byte -qopenmp -c -qopt-report=5

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: dim3_sweep_module._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (dim3_sweep_module._) [1/2=50.0%] dim3_sweep.f90(9,8)


    Report from: Code generation optimizations [cg]

dim3_sweep.f90(9,8):remark #34051: REGISTER ALLOCATION : [dim3_sweep_module._] dim3_sweep.f90:9

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DIM3_SWEEP_MODULE::DIM3_SWEEP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DIM3_SWEEP_MODULE::DIM3_SWEEP) [2/2=100.0%] dim3_sweep.f90(33,14)
  -> EXTERN: (33,14) _alloca
  -> EXTERN: (33,14) _alloca
  -> EXTERN: (33,14) _alloca
  -> EXTERN: (33,14) _alloca
  -> EXTERN: (33,14) _alloca
  -> EXTERN: (33,14) _alloca
  -> EXTERN: (33,14) _alloca
  -> EXTERN: (33,14) __getsp_inlined
  -> EXTERN: (204,14) SWEEP_RECV_BDRY
  -> EXTERN: (477,10) SWEEP_SEND_BDRY
  -> EXTERN: (482,3) __resetsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at dim3_sweep.f90(141,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dim3_sweep.f90(141,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dim3_sweep.f90(141,5)
         remark #15389: vectorization support: reference fxhv(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 2.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at dim3_sweep.f90(141,5)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference fxhv(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.250
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at dim3_sweep.f90(147,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at dim3_sweep.f90(148,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at dim3_sweep.f90(149,5)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at dim3_sweep.f90(165,9)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(165,9)
               remark #15389: vectorization support: reference jb_out(:,ic,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(165,9)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference jb_out(:,ic,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(166,9)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(166,9)
               remark #15389: vectorization support: reference kb_out(:,ic,j) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(166,9)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference kb_out(:,ic,j) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(184,9)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(184,9)
               remark #15389: vectorization support: reference psii(:,j,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(184,9)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference psii(:,j,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(188,13)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(188,13)
               remark #15389: vectorization support: reference psii(:,j,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(188,13)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference psii(:,j,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(219,11)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(219,11)
               remark #15389: vectorization support: reference psij(:,ic,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(219,11)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference psij(:,ic,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(223,15)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(223,15)
               remark #15389: vectorization support: reference psij(:,ic,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(223,15)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference psij(:,ic,k) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(228,11)
            remark #25401: memcopy(with guard) generated
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at dim3_sweep.f90(228,11)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(228,11)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(245,15)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(245,15)
               remark #15389: vectorization support: reference psik(:,ic,j) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(245,15)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference psik(:,ic,j) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(250,11)
            remark #25401: memcopy(with guard) generated
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at dim3_sweep.f90(250,11)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(250,11)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(241,11)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(241,11)
               remark #15389: vectorization support: reference psik(:,ic,j) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(241,11)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference psik(:,ic,j) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(258,7)
            remark #25408: memset generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(258,7)
               remark #15389: vectorization support: reference cell_fluxm(:) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 0.600
               remark #15300: LOOP WAS VECTORIZED
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 3 
               remark #15477: vector cost: 0.620 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(258,7)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference cell_fluxm(:) has unaligned access
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 1.250
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(272,7)
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(278,9) ]
            remark #15389: vectorization support: reference psi(a) has unaligned access   [ dim3_sweep.f90(281,11) ]
            remark #15389: vectorization support: reference psi(a) has unaligned access   [ dim3_sweep.f90(281,20) ]
            remark #15389: vectorization support: reference ec(a,l) has unaligned access   [ dim3_sweep.f90(281,29) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(305,11) ]
            remark #15388: vectorization support: reference pc(a) has aligned access   [ dim3_sweep.f90(305,11) ]
            remark #15389: vectorization support: reference psii(a,j,k) has unaligned access   [ dim3_sweep.f90(307,11) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(307,29) ]
            remark #15389: vectorization support: reference psii(a,j,k) has unaligned access   [ dim3_sweep.f90(307,38) ]
            remark #15389: vectorization support: reference psij(a,ic,k) has unaligned access   [ dim3_sweep.f90(308,11) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(308,30) ]
            remark #15389: vectorization support: reference psij(a,ic,k) has unaligned access   [ dim3_sweep.f90(308,39) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(392,9) ]
            remark #15389: vectorization support: reference w_(a) has unaligned access   [ dim3_sweep.f90(392,18) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(392,23) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(394,35) ]
            remark #15389: vectorization support: reference psi(a) has unaligned access   [ dim3_sweep.f90(396,55) ]
            remark #15389: vectorization support: reference ec(a,l+1) has unaligned access   [ dim3_sweep.f90(396,45) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(284,29) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(284,38) ]
            remark #15389: vectorization support: reference qim_(a,i,j,k,oct,g) has unaligned access   [ dim3_sweep.f90(284,47) ]
            remark #15388: vectorization support: reference pc(a) has aligned access   [ dim3_sweep.f90(291,11) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(291,21) ]
            remark #15389: vectorization support: reference psii(a,j,k) has unaligned access   [ dim3_sweep.f90(291,30) ]
            remark #15389: vectorization support: reference mu_(a) has unaligned access   [ dim3_sweep.f90(291,42) ]
            remark #15389: vectorization support: reference psij(a,ic,k) has unaligned access   [ dim3_sweep.f90(291,53) ]
            remark #15389: vectorization support: reference eta_(a) has unaligned access   [ dim3_sweep.f90(291,66) ]
            remark #15389: vectorization support: reference psik(a,ic,j) has unaligned access   [ dim3_sweep.f90(292,13) ]
            remark #15389: vectorization support: reference xi_(a) has unaligned access   [ dim3_sweep.f90(292,26) ]
            remark #15388: vectorization support: reference ptr_in(a,i,j,k) has aligned access   [ dim3_sweep.f90(292,37) ]
            remark #15389: vectorization support: reference dinv(a,ic,j,k) has unaligned access   [ dim3_sweep.f90(292,63) ]
            remark #15388: vectorization support: reference pc(a) has aligned access   [ dim3_sweep.f90(294,11) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(294,21) ]
            remark #15389: vectorization support: reference psii(a,j,k) has unaligned access   [ dim3_sweep.f90(294,30) ]
            remark #15389: vectorization support: reference mu_(a) has unaligned access   [ dim3_sweep.f90(294,42) ]
            remark #15389: vectorization support: reference psij(a,ic,k) has unaligned access   [ dim3_sweep.f90(294,53) ]
            remark #15389: vectorization support: reference eta_(a) has unaligned access   [ dim3_sweep.f90(294,66) ]
            remark #15389: vectorization support: reference psik(a,ic,j) has unaligned access   [ dim3_sweep.f90(295,13) ]
            remark #15389: vectorization support: reference xi_(a) has unaligned access   [ dim3_sweep.f90(295,26) ]
            remark #15389: vectorization support: reference dinv(a,ic,j,k) has unaligned access   [ dim3_sweep.f90(295,39) ]
            remark #15389: vectorization support: reference psik(a,ic,j) has unaligned access   [ dim3_sweep.f90(309,30) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(309,49) ]
            remark #15389: vectorization support: reference psik(a,ic,j) has unaligned access   [ dim3_sweep.f90(309,58) ]
            remark #15388: vectorization support: reference ptr_out(a,i,j,k) has aligned access   [ dim3_sweep.f90(311,13) ]
            remark #15388: vectorization support: reference psi(a) has aligned access   [ dim3_sweep.f90(311,36) ]
            remark #15388: vectorization support: reference ptr_in(a,i,j,k) has aligned access   [ dim3_sweep.f90(311,45) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 16
            remark #15309: vectorization support: normalized vectorization overhead 0.477
            remark #26012: vectorization support: data layout of a private variable 825_dv_template_2_par_red_ was optimized, converted to SoA
            remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15449: unmasked aligned unit stride stores: 7 
            remark #15450: unmasked unaligned unit stride loads: 19 
            remark #15451: unmasked unaligned unit stride stores: 4 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 152 
            remark #15477: vector cost: 16.370 
            remark #15478: estimated potential speedup: 8.490 
            remark #15488: --- end vector cost summary ---

            LOOP BEGIN at dim3_sweep.f90(280,9)
               remark #25460: No loop optimizations reported
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(395,9)
               remark #25460: No loop optimizations reported
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(272,7)
         <Remainder loop for vectorization>
            remark #15313: remainder loop was not vectorized: unsupported data type

            LOOP BEGIN at dim3_sweep.f90(280,9)
               remark #25460: No loop optimizations reported
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(395,9)
               remark #25460: No loop optimizations reported
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(396,11)
            remark #25460: No loop optimizations reported
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(412,9)
            remark #25399: memcopy generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at dim3_sweep.f90(412,9)
               remark #15389: vectorization support: reference fluxm(l,i,j,k) has unaligned access   [ dim3_sweep.f90(413,11) ]
               remark #15389: vectorization support: reference cell_fluxm(l) has unaligned access   [ dim3_sweep.f90(413,11) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 8
               remark #15309: vectorization support: normalized vectorization overhead 1.000
               remark #15300: LOOP WAS VECTORIZED
               remark #15450: unmasked unaligned unit stride loads: 1 
               remark #15451: unmasked unaligned unit stride stores: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 4 
               remark #15477: vector cost: 0.750 
               remark #15478: estimated potential speedup: 2.000 
               remark #15488: --- end vector cost summary ---
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(412,9)
            <Remainder loop for vectorization>
               remark #15389: vectorization support: reference fluxm(l,i,j,k) has unaligned access   [ dim3_sweep.f90(413,11) ]
               remark #15389: vectorization support: reference cell_fluxm(l) has unaligned access   [ dim3_sweep.f90(413,11) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 0.947
               remark #25015: Estimate of max trip count of loop=12
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(417,9)
         <Peeled loop for vectorization>
            remark #15389: vectorization support: reference fluxm(l,i,j,k) has unaligned access   [ dim3_sweep.f90(418,11) ]
            remark #15389: vectorization support: reference fluxm(l,i,j,k) has unaligned access   [ dim3_sweep.f90(418,28) ]
            remark #15389: vectorization support: reference cell_fluxm(l) has unaligned access   [ dim3_sweep.f90(418,45) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 0.955
            remark #15301: PEEL LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(417,9)
            remark #15388: vectorization support: reference fluxm(l,i,j,k) has aligned access   [ dim3_sweep.f90(418,11) ]
            remark #15388: vectorization support: reference fluxm(l,i,j,k) has aligned access   [ dim3_sweep.f90(418,28) ]
            remark #15389: vectorization support: reference cell_fluxm(l) has unaligned access   [ dim3_sweep.f90(418,45) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 8
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 1.083
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 6 
            remark #15477: vector cost: 0.750 
            remark #15478: estimated potential speedup: 7.110 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(417,9)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference fluxm(l,i,j,k) has unaligned access   [ dim3_sweep.f90(418,11) ]
            remark #15389: vectorization support: reference fluxm(l,i,j,k) has unaligned access   [ dim3_sweep.f90(418,28) ]
            remark #15389: vectorization support: reference cell_fluxm(l) has unaligned access   [ dim3_sweep.f90(418,45) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 0.955
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(432,11)
            remark #25401: memcopy(with guard) generated
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at dim3_sweep.f90(432,11)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(432,11)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(442,11)
            remark #25401: memcopy(with guard) generated
            remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

            LOOP BEGIN at dim3_sweep.f90(442,11)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               remark #25439: unrolled with remainder by 2  
            LOOP END

            LOOP BEGIN at dim3_sweep.f90(442,11)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(450,49)
         <Peeled loop for vectorization>
            remark #15389: vectorization support: reference wmu(:) has unaligned access
            remark #15389: vectorization support: reference psii(:,j,k) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 2.389
            remark #25015: Estimate of max trip count of loop=15
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(450,49)
            remark #15389: vectorization support: reference wmu(:) has unaligned access
            remark #15389: vectorization support: reference psii(:,j,k) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 16
            remark #15309: vectorization support: normalized vectorization overhead 2.733
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 7 
            remark #15477: vector cost: 0.930 
            remark #15478: estimated potential speedup: 5.660 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(450,49)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference wmu(:) has unaligned access
            remark #15389: vectorization support: reference psii(:,j,k) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 2.389
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(451,49)
         <Peeled loop for vectorization>
            remark #15389: vectorization support: reference weta(:) has unaligned access
            remark #15389: vectorization support: reference psij(:,ic,k) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 2.389
            remark #25015: Estimate of max trip count of loop=15
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(451,49)
            remark #15389: vectorization support: reference weta(:) has unaligned access
            remark #15389: vectorization support: reference psij(:,ic,k) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 16
            remark #15309: vectorization support: normalized vectorization overhead 2.733
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 7 
            remark #15477: vector cost: 0.930 
            remark #15478: estimated potential speedup: 5.660 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(451,49)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference weta(:) has unaligned access
            remark #15389: vectorization support: reference psij(:,ic,k) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 2.389
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(452,49)
         <Peeled loop for vectorization>
            remark #15389: vectorization support: reference wxi(:) has unaligned access
            remark #15389: vectorization support: reference psik(:,ic,j) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 2.389
            remark #25015: Estimate of max trip count of loop=15
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(452,49)
            remark #15389: vectorization support: reference wxi(:) has unaligned access
            remark #15389: vectorization support: reference psik(:,ic,j) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 16
            remark #15309: vectorization support: normalized vectorization overhead 2.733
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 7 
            remark #15477: vector cost: 0.930 
            remark #15478: estimated potential speedup: 5.660 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at dim3_sweep.f90(452,49)
         <Remainder loop for vectorization>
            remark #15389: vectorization support: reference wxi(:) has unaligned access
            remark #15389: vectorization support: reference psik(:,ic,j) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 8
            remark #15309: vectorization support: normalized vectorization overhead 2.389
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

dim3_sweep.f90(141,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(141,5):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(165,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(165,9):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(166,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(166,9):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(228,11):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(228,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(228,11):remark #34026: call to memcpy implemented as a call to optimized library version
dim3_sweep.f90(241,11):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(241,11):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(250,11):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(250,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(250,11):remark #34026: call to memcpy implemented as a call to optimized library version
dim3_sweep.f90(258,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(258,7):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(432,11):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(432,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(432,11):remark #34026: call to memcpy implemented as a call to optimized library version
dim3_sweep.f90(442,11):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(442,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(442,11):remark #34026: call to memcpy implemented as a call to optimized library version
dim3_sweep.f90(184,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(184,9):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(413,11):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(413,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(413,11):remark #34026: call to memcpy implemented as a call to optimized library version
dim3_sweep.f90(245,15):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(245,15):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(223,15):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(223,15):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(219,11):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(219,11):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(188,13):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
dim3_sweep.f90(188,13):remark #34026: call to memset implemented as a call to optimized library version
dim3_sweep.f90(33,14):remark #34051: REGISTER ALLOCATION : [dim3_sweep_module_mp_dim3_sweep_] dim3_sweep.f90:33

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   36[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm19 k0-k2]
        
    Routine temporaries
        Total         :    1331
            Global    :     468
            Local     :     863
        Regenerable   :      92
        Spilled       :     177
        
    Routine stack
        Variables     :    2808 bytes*
            Reads     :      56 [2.80e+03 ~ 1.7%]
            Writes    :     318 [3.17e+02 ~ 0.2%]
        Spills        :    1488 bytes*
            Reads     :     495 [2.30e+04 ~ 13.5%]
            Writes    :     213 [5.77e+03 ~ 3.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
